# Everyone needs a little color in their lives
RED='\[\033[31m\]'
GREEN='\[\033[32m\]'
YELLOW='\[\033[33m\]'
BLUE='\[\033[34m\]'
PURPLE='\[\033[35m\]'
CYAN='\[\033[36m\]'
WHITE='\[\033[37m\]'
NIL='\[\033[00m\]'

# Hostname styles
FULL='\H'
SHORT='\h'

# System => color/hostname map:
# UC: username color
# LC: location/cwd color
# HD: hostname display (\h vs \H)
# Defaults:
UC=$GREEN
LC=$BLUE
HD=$FULL


function nodes(){
	for i in $(kubectl get pods | awk '{print $1}' | grep $1); do
		kubectl describe pod $i | grep Node; 
	done;
}



function namespace(){
	CONTEXT=$(kubectl config view | grep current-context | awk '{print $2}')
	kubectl config set-context $CONTEXT --namespace=$1
}

function setDSP(){
	kubectl config set-cluster dev-dsp --server=https://kube-dev-dsp.notprod.homeoffice.gov.uk
	kubectl config set-credentials dev-dsp --token=$KUBE_TOKEN
	kubectl config set-context dev-dsp --cluster=dev-dsp --namespace=$NAMESPACE --user=dev-dsp
	kubectl config use-context dev-dsp
}

function newpost(){
	TODAY=$(date '+%Y_%m_%d__%H_%M_%S')
	TITLE=$1
	hugo new post/"$TODAY-$TITLE"
}

function dex(){
	docker exec -it $1 bash
}

function rmimages(){
	docker rmi $( docker images | grep '<none>' | tr -s ' ' | cut -d ' ' -f 3)
}

function updatenode(){
	knife exec -E 'nodes.transform("name:'$1'") {|n| puts n.run_list << "'$2'" unless n.run_list.include?("'$2'"); n.save }'
}

function old(){
	mv $1 old.$1;
}

function dsall(){
				docker stop $(docker ps -a -q)
}

function dips(){
				docker ps -q | xargs -n 1 docker inspect --format '{{ .NetworkSettings.IPAddress }} {{ .Name }}' | sed 's/ \// /'
}

function shot(){
				droppath="/home/ivan/Dropbox/Public/screenshots/";
				now=`date +"%m_%d_%Y_%T"`;
				fimage="$now.png";
				`scrot $fimage`;
				sleep 1;
				`mv $fimage $droppath`;
				link=`dropbox puburl "$droppath$fimage"`;
				echo -n $link | xclip -selection c
}

function mkdircd () { 
	mkdir -p "$@" && cd $_;
}


# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/" 
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}



# Prompt function because PROMPT_COMMAND is awesome
function set_prompt() {
    # show the host only and be done with it.
    host="${UC}${HD}${NIL}"

    # Special vim-tab-like shortpath (~/folder/directory/foo => ~/f/d/foo)
    _pwd=`pwd | sed "s#$HOME#~#"`
    if [[ $_pwd == "~" ]]; then
       _dirname=$_pwd
    else
       _dirname=`dirname "$_pwd" `
        if [[ $_dirname == "/" ]]; then
              _dirname=""
        fi
       _dirname="$_dirname/`basename "$_pwd"`"
    fi
    path="${LC}${_dirname}${NIL}"
    myuser="${UC}\u@${NIL}"

    # Dirtiness from:
    # http://henrik.nyh.se/2008/12/git-dirty-prompt#comment-8325834
    if git update-index -q --refresh 2>/dev/null; git diff-index --quiet --cached HEAD --ignore-submodules -- 2>/dev/null && git diff-files --quiet --ignore-submodules 2>/dev/null
        then dirty=""
    else
       dirty="${RED}*${NIL}"
    fi
    _branch=$(git symbolic-ref HEAD 2>/dev/null)
    _branch=${_branch#refs/heads/} # apparently faster than sed
    branch="" # need this to clear it when we leave a repo
    if [[ -n $_branch ]]; then
       branch=" ${NIL}[${PURPLE}${_branch}${dirty}${NIL}]"
    fi

    # Dollar/pound sign
    end="${LC}\$${NIL} "

    # Virtual Env
    if [[ $VIRTUAL_ENV != "" ]]
       then
           venv=" ${RED}(${VIRTUAL_ENV##*/})"
    else
       venv=''
    fi

    export PS1="${myuser}${path}${venv}${branch} ${end}"
}

export PROMPT_COMMAND=set_prompt

